from google.colab import drive
drive.mount('/content/drive')

# Extracting the dataset from .rar files
!unrar x "path to mit-bih.rar"
!unrar x "path to data.rar"

# Install required libraries
!pip install keras
!pip install wfdb
!pip install numpy
!pip install pandas
!pip install scipy
!pip install biosppy
!pip install opencv-python
!pip install glob2
!pip install graphic tools


import os
import wfdb
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy import signal
from biosppy.signals import ecg
from glob import glob
import biosppy
import cv2


# Get list of all MIT-BIH dataset files (excluding extensions)
paths = glob('mitbih/*.atr')
paths = [path[:-4] for path in paths]
paths.sort()

count_of_paths = len(paths)
print("Count of paths:", count_of_paths)


# List of ECG beat types (from the MIT-BIH dataset annotations)
realbeats = ['N','L','R','B','A','a','J','S','V','r',
             'F','e','j','n','E','/','f','Q','?']


# Dictionaries for beat categories (to store extracted heartbeats)
Normal = [] #Normal beat 75016
L = [] #Left bundle branch block beat 8072
R = [] #Right bundle branch block beat 7256
P = [] #Paced beat 7024
V = [] #Premature ventricular contraction 7130


a = [] #Aberrated atrial premature beat 150
J = [] #Nodal (junctional) premature beat 83
S = [] #Supraventricular premature beat 2
A = [] #Atrial premature beat 2544
F = [] #Fusion of ventricular and normal beat 803
e = [] #Atrial escape beat 16
j = [] #Nodal (junctional) escape beat 229
E = [] #Ventricular escape beat 106
f = [] #Fusion of paced and normal beat 982
Q = [] #Unclassifiable beat 33

records = paths
# Process all ECG records and extract 'Normal' beats
Normal = []
for e in records:
    signals, fields = wfdb.rdsamp(e, channels = [0])

    ann = wfdb.rdann(e, 'atr')
    good = ['N']
    ids = np.in1d(ann.symbol, good)
    imp_beats = ann.sample[ids]
    beats = (ann.sample)
    for i in imp_beats:
        beats = list(beats)
        j = beats.index(i)
        if(j!=0 and j!=(len(beats)-1)):
            x = beats[j-1]
            y = beats[j+1]
            diff1 = abs(x - beats[j])//2
            diff2 = abs(y - beats[j])//2
            Normal.append(signals[beats[j] - diff1: beats[j] + diff2, 0])
count_of_N = len(Normal)
print("Count of normal heartbeats (N):", count_of_N)

L = []
for e in records:
    signals, fields = wfdb.rdsamp(e, channels = [0])

    ann = wfdb.rdann(e, 'atr')
    good = ['L']
    ids = np.in1d(ann.symbol, good)
    imp_beats = ann.sample[ids]
    beats = (ann.sample)
    for i in imp_beats:
        beats = list(beats)
        j = beats.index(i)
        if(j!=0 and j!=(len(beats)-1)):
            x = beats[j-1]
            y = beats[j+1]
            diff1 = abs(x - beats[j])//2
            diff2 = abs(y - beats[j])//2
            L.append(signals[beats[j] - diff1: beats[j] + diff2, 0])
count_of_N = len(L)
print("Count of L", count_of_N)

R = []
for e in records:
    signals, fields = wfdb.rdsamp(e, channels = [0])

    ann = wfdb.rdann(e, 'atr')
    good = ['R']
    ids = np.in1d(ann.symbol, good)
    imp_beats = ann.sample[ids]
    beats = (ann.sample)
    for i in imp_beats:
        beats = list(beats)
        j = beats.index(i)
        if(j!=0 and j!=(len(beats)-1)):
            x = beats[j-1]
            y = beats[j+1]
            diff1 = abs(x - beats[j])//2
            diff2 = abs(y - beats[j])//2
            R.append(signals[beats[j] - diff1: beats[j] + diff2, 0])
count_of_N = len(R)
print("Count of R", count_of_N)

V = []
for e in records:
    signals, fields = wfdb.rdsamp(e, channels = [0])

    ann = wfdb.rdann(e, 'atr')
    good = ['V']
    ids = np.in1d(ann.symbol, good)
    imp_beats = ann.sample[ids]
    beats = (ann.sample)
    for i in imp_beats:
        beats = list(beats)
        j = beats.index(i)
        if(j!=0 and j!=(len(beats)-1)):
            x = beats[j-1]
            y = beats[j+1]
            diff1 = abs(x - beats[j])//2
            diff2 = abs(y - beats[j])//2
            V.append(signals[beats[j] - diff1: beats[j] + diff2, 0])
count_of_N = len(V)
print("Count of V", count_of_N)

P = []
for e in records:
    signals, fields = wfdb.rdsamp(e, channels = [0])

    ann = wfdb.rdann(e, 'atr')
    good = ['/']
    ids = np.in1d(ann.symbol, good)
    imp_beats = ann.sample[ids]
    beats = (ann.sample)
    for i in imp_beats:
        beats = list(beats)
        j = beats.index(i)
        if(j!=0 and j!=(len(beats)-1)):
            x = beats[j-1]
            y = beats[j+1]
            diff1 = abs(x - beats[j])//2
            diff2 = abs(y - beats[j])//2
            P.append(signals[beats[j] - diff1: beats[j] + diff2, 0])
count_of_N = len(P)
print("Count of P", count_of_N)

kernel = np.ones((4,4),np.uint8)
count = 1

for count, i in enumerate(Normal):
    fig = plt.figure(frameon=False)
    plt.plot(i)
    plt.xticks([]), plt.yticks([])
    for spine in plt.gca().spines.values():
        spine.set_visible(False)
    print(count)
    if(count<=7501):
      filename = '/content/data/test/N/N' + str(count) + '.png'
    if (count>=7502 and count<=15003):
        filename = '/content/data/validate/N/N' + str(count) + '.png'
    else:
        filename = '/content/data/train/N/N' + str(count) + '.png'

    fig.savefig(filename)
    plt.close(fig)
    im_gray = cv2.imread(filename, cv2.IMREAD_GRAYSCALE)
    im_gray = cv2.erode(im_gray,kernel,iterations = 1)
    im_gray = cv2.resize(im_gray, (128, 128), interpolation = cv2.INTER_LANCZOS4)
    cv2.imwrite(filename, im_gray)
    im_gray = cv2.imread(filename)
    image = im_gray
 #Left Top Crop
    crop = image[:96, :96]
    crop = cv2.resize(crop, (128, 128))
    cv2.imwrite(filename[:-4] + 'leftTop' + '.png', crop)

    #Center Top Crop
    crop = image[:96, 16:112]
    crop = cv2.resize(crop, (128, 128))
    cv2.imwrite(filename[:-4] + 'centerTop' + '.png', crop)

    #Right Top Crop
    crop = image[:96, 32:]
    crop = cv2.resize(crop, (128, 128))
    cv2.imwrite(filename[:-4] + 'rightTop' + '.png', crop)

    #Left Center Crop
    crop = image[16:112, :96]
    crop = cv2.resize(crop, (128, 128))
    cv2.imwrite(filename[:-4] + 'leftCenter' + '.png', crop)

    #Center Center Crop
    crop = image[16:112, 16:112]
    crop = cv2.resize(crop, (128, 128))
    cv2.imwrite(filename[:-4] + 'centerCenter' + '.png', crop)

    #Right Center Crop
    crop = image[16:112, 32:]
    crop = cv2.resize(crop, (128, 128))
  #Right Center Crop
    crop = image[16:112, 32:]
    crop = cv2.resize(crop, (128, 128))
    cv2.imwrite(filename[:-4] + 'rightCenter' + '.png', crop)
    #Left Bottom Crop
    crop = image[32:, :96]
    crop = cv2.resize(crop, (128, 128))
    cv2.imwrite(filename[:-4] + 'leftBottom' + '.png', crop)

    #Center Bottom Crop
    crop = image[32:, 16:112]
    crop = cv2.resize(crop, (128, 128))
    cv2.imwrite(filename[:-4] + 'centerBottom' + '.png', crop)

    #Right Bottom Crop
    crop = image[32:, 32:]
    crop = cv2.resize(crop, (128, 128))
    cv2.imwrite(filename[:-4] + 'rightBottom' + '.png', crop)

kernel = np.ones((4,4),np.uint8)
count = 1
for count, i in enumerate(L):
    fig = plt.figure(frameon=False)
    plt.plot(i)
    plt.xticks([]), plt.yticks([])
    for spine in plt.gca().spines.values():
        spine.set_visible(False)
    print(count)
    if(count<=807):
        filename = '/content/data/test/L/L' + str(count) + '.png'
    elif (count>=808 and count<=1615):
        filename = '/content/data/validate/L/L' + str(count) + '.png'
    else:
        filename = '/content/data/train/L/L' + str(count) + '.png'

    fig.savefig(filename)
    # plt.close(fig)
    im_gray = cv2.imread(filename, cv2.IMREAD_GRAYSCALE)
    im_gray = cv2.erode(im_gray,kernel,iterations = 1)
    im_gray = cv2.resize(im_gray, (224, 224), interpolation = cv2.INTER_LANCZOS4)
    cv2.imwrite(filename, im_gray)
    im_gray = cv2.imread(filename)

    image = im_gray

    #Left Top Crop
    crop = image[:96, :96]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'leftTop' + '.png', crop)

    #Center Top Crop
    crop = image[:96, 16:112]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'centerTop' + '.png', crop)

    #Right Top Crop
    crop = image[:96, 32:]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'rightTop' + '.png', crop)

    #Left Center Crop
    crop = image[16:112, :96]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'leftCenter' + '.png', crop)

    #Center Center Crop
    crop = image[16:112, 16:112]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'centerCenter' + '.png', crop)

    #Right Center Crop
    crop = image[16:112, 32:]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'rightCenter' + '.png', crop)

    #Left Bottom Crop
    crop = image[32:, :96]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'leftBottom' + '.png', crop)

    #Center Bottom Crop
    crop = image[32:, 16:112]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'centerBottom' + '.png', crop)

    #Right Bottom Crop
    crop = image[32:, 32:]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'rightBottom' + '.png', crop)

kernel = np.ones((4,4),np.uint8)
count = 1
for count, i in enumerate(P):
    fig = plt.figure(frameon=False)
    plt.plot(i)
    plt.xticks([]), plt.yticks([])
    for spine in plt.gca().spines.values():
        spine.set_visible(False)
    print(count)
    if(count<=702):
        filename = '/content/data/test/P/P' + str(count) + '.png'
    elif(count>=703 and count<=1405):
        filename = '/content/data/validate/P/P' + str(count) + '.png'
    else:
        filename = '/content/data/train/P/P' + str(count) + '.png'

    fig.savefig(filename)
    plt.close(fig)
    im_gray = cv2.imread(filename, cv2.IMREAD_GRAYSCALE)
    im_gray = cv2.erode(im_gray,kernel,iterations = 1)
    im_gray = cv2.resize(im_gray, (224, 224), interpolation = cv2.INTER_LANCZOS4)
    cv2.imwrite(filename, im_gray)
    im_gray = cv2.imread(filename)

    image = im_gray

    #Left Top Crop
    crop = image[:96, :96]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'leftTop' + '.png', crop)

    #Center Top Crop
    crop = image[:96, 16:112]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'centerTop' + '.png', crop)

    #Right Top Crop
    crop = image[:96, 32:]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'rightTop' + '.png', crop)

    #Left Center Crop
    crop = image[16:112, :96]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'leftCenter' + '.png', crop)

    #Center Center Crop
    crop = image[16:112, 16:112]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'centerCenter' + '.png', crop)

    #Right Center Crop
    crop = image[16:112, 32:]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'rightCenter' + '.png', crop)

    #Left Bottom Crop
    crop = image[32:, :96]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'leftBottom' + '.png', crop)

    #Center Bottom Crop
    crop = image[32:, 16:112]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'centerBottom' + '.png', crop)

    #Right Bottom Crop
    crop = image[32:, 32:]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'rightBottom' + '.png', crop)

kernel = np.ones((4,4),np.uint8)
count = 1
for count, i in enumerate(V):
    fig = plt.figure(frameon=False)
    plt.plot(i)
    plt.xticks([]), plt.yticks([])
    for spine in plt.gca().spines.values():
        spine.set_visible(False)
    print(count)
    if(count<=713):
        filename = '/content/data/test/V/V' + str(count) + '.png'
    elif (count>=714 and count<=1428):
        filename = '/content/data/validate/V/V' + str(count) + '.png'
    else:
        filename = '/content/data/train/V/V' + str(count) + '.png'

    fig.savefig(filename)
    plt.close(fig)
    im_gray = cv2.imread(filename, cv2.IMREAD_GRAYSCALE)
    im_gray = cv2.erode(im_gray,kernel,iterations = 1)
    im_gray = cv2.resize(im_gray, (224, 224), interpolation = cv2.INTER_LANCZOS4)
    cv2.imwrite(filename, im_gray)
    im_gray = cv2.imread(filename)

    image = im_gray

    #Left Top Crop
    crop = image[:96, :96]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'leftTop' + '.png', crop)

    #Center Top Crop
    crop = image[:96, 16:112]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'centerTop' + '.png', crop)

    #Right Top Crop
    crop = image[:96, 32:]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'rightTop' + '.png', crop)

    #Left Center Crop
    crop = image[16:112, :96]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'leftCenter' + '.png', crop)

    #Center Center Crop
    crop = image[16:112, 16:112]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'centerCenter' + '.png', crop)

    #Right Center Crop
    crop = image[16:112, 32:]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'rightCenter' + '.png', crop)
    #Left Bottom Crop
    crop = image[32:, :96]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'leftBottom' + '.png', crop)

    #Center Bottom Crop
    crop = image[32:, 16:112]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'centerBottom' + '.png', crop)

    #Right Bottom Crop
    crop = image[32:, 32:]
    crop = cv2.resize(crop, (224, 224))
cv2.imwrite(filename[:-4] + 'rightBottom' + '.png', crop)

kernel = np.ones((4,4),np.uint8)
count = 1
for count, i in enumerate(V):
    fig = plt.figure(frameon=False)
    plt.plot(i)
    plt.xticks([]), plt.yticks([])
    for spine in plt.gca().spines.values():
        spine.set_visible(False)
    print(count)
    if(count<=713):
        filename = '/content/data/test/V/V' + str(count) + '.png'
    elif (count>=714 and count<=1428):
        filename = '/content/data/validate/V/V' + str(count) + '.png'
    else:
        filename = '/content/data/train/V/V' + str(count) + '.png'

    fig.savefig(filename)
    plt.close(fig)
    im_gray = cv2.imread(filename, cv2.IMREAD_GRAYSCALE)
    im_gray = cv2.erode(im_gray,kernel,iterations = 1)
    im_gray = cv2.resize(im_gray, (224, 224), interpolation = cv2.INTER_LANCZOS4)
    cv2.imwrite(filename, im_gray)
    im_gray = cv2.imread(filename)

    image = im_gray

    #Left Top Crop
    crop = image[:96, :96]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'leftTop' + '.png', crop)

    #Center Top Crop
    crop = image[:96, 16:112]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'centerTop' + '.png', crop)

    #Right Top Crop
    crop = image[:96, 32:]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'rightTop' + '.png', crop)

    #Left Center Crop
    crop = image[16:112, :96]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'leftCenter' + '.png', crop)

    #Center Center Crop
    crop = image[16:112, 16:112]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'centerCenter' + '.png', crop)

    #Right Center Crop
    crop = image[16:112, 32:]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'rightCenter' + '.png', crop)
    #Left Bottom Crop
    crop = image[32:, :96]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'leftBottom' + '.png', crop)

    #Center Bottom Crop
    crop = image[32:, 16:112]
    crop = cv2.resize(crop, (224, 224))
    cv2.imwrite(filename[:-4] + 'centerBottom' + '.png', crop)

    #Right Bottom Crop
    crop = image[32:, 32:]
    crop = cv2.resize(crop, (224, 224))
cv2.imwrite(filename[:-4] + 'rightBottom' + '.png', crop)

tensorboard = TensorBoard(log_dir = os.path.join(
    "logs",
    "fit",
    datetime.datetime.now().strftime("%Y%m%d-%H%M%S"),
))

train_path = 'path to /content/data/train'
valid_path = 'path to /content/data/validate'
test_path = 'path to /content/data/test'

train_datagen = ImageDataGenerator(rescale=1.0/255.0, shear_range=0.2, zoom_range=0.2, horizontal_flip=True)
valid_datagen = ImageDataGenerator(rescale=1.0/255.0)
test_datagen = ImageDataGenerator(rescale=1.0/255.0)

train_batches = train_datagen.flow_from_directory(train_path, target_size=(128, 128), classes=['L','N','P','R','V'], batch_size=32, class_mode='categorical')
valid_batches = valid_datagen.flow_from_directory(valid_path, target_size=(128, 128), classes=['L','N','P','R','V'], batch_size=16, class_mode='categorical')
test_batches = test_datagen.flow_from_directory(test_path, target_size=(224, 224), classes=['A','L','N','P','R','V'], batch_size=16, shuffle=False)

IMAGE_SIZE = (128,128,3)
model = Sequential()

model.add(Conv2D(64, (3,3),strides = (1,1), input_shape = IMAGE_SIZE,kernel_initializer='glorot_uniform'))

model.add(tensorflow.keras.layers.ELU())

model.add(BatchNormalization())

model.add(Conv2D(64, (3,3),strides = (1,1),kernel_initializer='glorot_uniform'))

model.add(tensorflow.keras.layers.ELU())

model.add(BatchNormalization())

model.add(MaxPool2D(pool_size=(2, 2), strides= (2,2)))

model.add(Conv2D(128, (3,3),strides = (1,1),kernel_initializer='glorot_uniform'))

model.add(tensorflow.keras.layers.ELU())

model.add(BatchNormalization())

model.add(Conv2D(128, (3,3),strides = (1,1),kernel_initializer='glorot_uniform'))

model.add(tensorflow.keras.layers.ELU())

model.add(BatchNormalization())

model.add(MaxPool2D(pool_size=(2, 2), strides= (2,2)))

model.add(Conv2D(256, (3,3),strides = (1,1),kernel_initializer='glorot_uniform'))

model.add(tensorflow.keras.layers.ELU())

model.add(BatchNormalization())

model.add(Conv2D(256, (3,3),strides = (1,1),kernel_initializer='glorot_uniform'))

model.add(tensorflow.keras.layers.ELU())

model.add(BatchNormalization())

model.add(MaxPool2D(pool_size=(2, 2), strides= (2,2)))

model.add(Flatten())

model.add(Dense(2048))

model.add(tensorflow.keras.layers.ELU())

model.add(BatchNormalization())

model.add(Dropout(0.5))

model.add(Dense(5, activation='softmax'))

#model.compile(Adam(lr=.00015), loss='categorical_crossentropy', metrics=['accuracy'])
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.summary()

train_steps_per_epoch = np.math.ceil(train_batches.samples / train_batches.batch_size)
valid_steps_per_epoch = np.math.ceil(valid_batches.samples / valid_batches.batch_size)
print(valid_steps_per_epoch)
print(train_steps_per_epoch)

from IPython.display import display
from PIL import Image
history = model.fit(train_batches, steps_per_epoch=50, validation_data=valid_batches, callbacks = [tensorboard], validation_steps=800, epochs=20)

test_steps_per_epoch = np.math.ceil(test_batches.samples / test_batches.batch_size)
print(test_steps_per_epoch)

from tensorflow.keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img
import numpy as np
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from tensorflow.keras.applications.vgg16 import preprocess_input

# Load the image and resize it to the expected size
image = load_img('/content/data/train/V/V1432leftTop.png', target_size=(128, 128))
image = img_to_array(image)
image = np.expand_dims(image, axis=0)
# image = preprocess_input(image)
image /= 255.0
# Make the prediction
pred = model.predict(image)
print(pred)
# Assuming the model is a classification model, get the predicted class
pred_class = pred.argmax(axis=1)


# Map the predicted class index to the corresponding label
if (pred_class == 1):
    print('L')
elif (pred_class == 2):
    print('V')
elif (pred_class == 3):
    print('P')
elif (pred_class == 4):
    print('R')
else:
    print('N') 
